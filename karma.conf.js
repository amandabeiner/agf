// Karma configuration
// Generated on Mon May 29 2017 11:14:45 GMT-0400 (EDT)

var path = require('path')

module.exports = function(config) {
  config.set({

    browsers: ['PhantomJS'],

    // base path that will be used to resolve all patterns (eg. files, exclude)
    basePath: '',


    // frameworks to use
    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter
    frameworks: ['jasmine'],


    // list of files / patterns to load in the browser
    files: [
      'node_modules/babel-polyfill/dist/polyfill.js',
      'app/javascript/react/test/testHelper.js',
      'node_modules/whatwg-fetch/fetch.js',
      'app/javascript/react/test/fixtures/*.json'
    ],


    // preprocess matching files before serving them to the browser
    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor
    preprocessors: {

      'app/javascript/react/test/fixtures/*.json': ['json_fixtures'],
      'app/javascript/react/test/testHelper.js': [
        // use karma-webpack to preprocess the file via webpack
        'webpack',
        // use karma-sourcemap-loader to utilize sourcemaps generated by webpack
        'sourcemap'
      ]
    },

    webpack: {
     // generate sourcemaps
     devtool: 'eval-source-map',
     // enzyme-specific setup
    externals: {
      'cheerio': 'window',
      'react/addons': true,
      'react/lib/ExecutionEnvironment': true,
      'react/lib/ReactContext': true
    },

    module: {
       loaders: [
         {
           include: /\.json$/,
           loader: 'json-loader'
         },
         // use babel-loader to transpile the test and src folders
         {
           test: /\.jsx?$/,
           exclude: /node_modules/,
           loader: 'babel-loader'
         },
         // use isparta-loader for ES6 code coverage in the src folder
         {
           test: /\.jsx?$/,
           exclude: /(node_modules|test)/,
           loader: 'istanbul-instrumenter-loader',
           query: {
             esModules: true
           }
         }
       ]
     },

     resolve: {
       modules: ['src', 'node_modules']
     }
   },

   webpackMiddleware: {
      // do not output webpack build information to the browser's console
      noInfo: true
    },

    jsonFixturesPreprocessor: {
      stripPrefix: 'app/javascript/react/test/fixtures/'
    },


    // test results reporter to use
    // possible values: 'dots', 'progress'
    // available reporters: https://npmjs.org/browse/keyword/karma-reporter
    reporters: ['spec', 'coverage','progress'],

    // karma-spec-reporter configuration
    specReporter: {
      // remove meaningless stack trace when tests do not pass
      maxLogLines: 1,
      // do not print information about tests that are passing
      suppressPassed: true
    },

    // karma-coverage configuration
    coverageReporter: {
      // output coverage results to the coverage folder in the project's root
      dir: 'coverage',
      subdir: '.',
      // output coverage results as html
      type: 'html'
    },


    // web server port
    port: 9876,


    // enable / disable colors in the output (reporters and logs)
    colors: true,


    // level of logging
    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG
    logLevel: config.LOG_INFO,


    // enable / disable watching file and executing tests whenever any file changes
    autoWatch: true,

    // Continuous Integration mode
    // if true, Karma captures browsers, runs the tests and exits
    singleRun: false,

    // Concurrency level
    // how many browser should be started simultaneous
    concurrency: Infinity
  })
}
